name: NDAify CD

on:
  push:
    branches:
      - master

jobs:
  tests:
    name: Test
    runs-on: ubuntu-latest
    steps:
      # Check out the repo
      - uses: actions/checkout@v2
      # Install node
      - uses: actions/setup-node@v1
        with:
          node-version: '14.2.0'
      # Utilize yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # Install deps
      - run: npm ci
      # Run tests
      - run: npm test
  deploy:
    name: Deploy
    needs: tests
    runs-on: ubuntu-latest
    steps:
      # Check out the repo
      - uses: actions/checkout@v2
      # Install node
      - uses: actions/setup-node@v1
        with:
          node-version: '14.2.0'
      # Utilize yarn cache
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      # Install deps
      - run: npm ci
      # Set Airtable API Key
      - run: | 
          echo '{ "airtableApiKey": "'$AIRTABLE_API_KEY'" }' > .airtableblocksrc.json
        env:
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      # run block release
      - run: npm run release
      # Unset Airtable API Key
      - run: rm -rf .airtableblocksrc.json


      